<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAGBgAAAEACADIBgAAJgAAABgYAAABACAAiAkAAO4GAAAoAAAAGAAAADAAAAABAAgAAAAAAKAC
        AAAAAAAAAAAAAAABAAAAAAAAzocyAHlHSwDho0AA6bZMAK2LkgC7bCYAm3F7AMqHPADptUsA7ujqAOWs
        RwD7+fkA/v//APXy8wDOhjIApH+GAPf09ACIXGMAeUlMAIpfZADWkjgA3Z8/AL2ipwCwXR4A8+7vAO/p
        6wB8TlEAzYUxAOa0UgDt5ugA39PVAPn3+AC7bScA5qs0AN7Q0gD8+voA1cXHAOi1VADCdSkA6rdNAPz7
        +wDTjzUA0Iw0ANXFxgCqhIsA6MeDAL5wKQDNvcsAxHgrAOu5TgDnrUAA3dPUAM69vgDe0tQA6uXlAOvk
        5gCtjJAA6+bnAN+jRgDv7OwAqFcbAL5tHACsUxgA3Z8+ALZlGgDRwcIAsI+VAOSoQwDw6usAx7CzALpp
        JQCifYIAz4gzAOGhJwC3lpwA2cjMAOSpMwCcPAwA3tXWAKNFEgDm4esA354hALueoQCZcHMAxXosAO7q
        6gC8bicAzYY1ANrLzQC3mZ8A4tfZAPr5+ADx7O4Aq4iMAOGoRQDx7vAAmzoKANLAwgDmsEkA3c/RAPTx
        8ADkqD8Ap0wVAOzm6ADUkTcAxXksANeTOQDIsrQA461OAP7+/gDs5ecA5NzcAMp/LgD08fEA36dLAPXz
        8gDNhDAAxHcrAH9RXgDy7e8AzYAnAN6hQADw7O0A7LpNAPj39gClSBQAsmEfAK9aGQDsv1sAzIEtAKpO
        FgCsVBgA/fz8ALOVmgC9oaYAx3cmANTExwDm3eAAs2MhAO3q6QCbOwoA1ZE3AMV7LADZmT4A1ZI3AKuK
        kQDy7e4A4NnkAOWtRwDk3N4A3dHRANWVPADpx4UA7OTmAMOqsADcnkEA1I84AOexPQDkq0YArFAXANnK
        zADay84A7+zrAPby9ADBdCkA67lLANeVPADcztEA+fj3AOexSgDdnD0AybO1AKhTGAD7+vsA9/X0AMOp
        rADox4IA7cJgAMu1ugC9bykA08XQALVgHgDlslIAv3EjALSTmQDbnkMA////AP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAALy8vLy8vLy8vLy8vLy8vLy8vBcXQH+svLy8vLy8vLy8vLy8vLy8
        vLy8BYchTFE9PLy8vLy8vLy8vLy8vLy8vLwFgaUDAydJtby8vLy8vLy8vLy8vLy8vKQqewgICAOdt7y8
        vLy8vLy8vLy8vLy8DqapCp4KlEN4Rry8vLy8vLy8vLy8vLwOuV4/FRV5qk8pILy8vLy8vLy8vLy8vGhy
        m40UFGqQfZwmvLy8vLy8vLy8vLy8B7aXGwAASHRmj3C8vLy8vLy8vLy8vLwHHFcwaVSOdYI6ALy8vLy8
        vLy8vLy8vLwHYmBWLrMFn2wAvLy8vLy8vLy8vLy8vAG0mGVNin4+JQC8vLy8vLy8vLwSEgEBAWOJUC0y
        jIOAAry8vLy8vLy8GlNFWB6rNZanM5OwMbECvLy8vLy8vLwar1wdmTduZzRBiE4vAgK8vLy8vLy8vBNS
        o0QZCQkJGTZrJEt2vLy8vLy8vLy8vBNbDWRVcxh3khg7IhG8vLy8vLy8vLy8vEptrV1HX6iuEBB8WhG8
        vLy8vLy8vLy8vCu6uA+8OA2ECwsjKAa8vLy8vLy8vLy8vBYWD7y8vIUfugy6DAa8vLy8vLy8vLy8vEKR
        vLy8vLwsurq6ega8vLy8vLy8vLy8vLy8vLy8vASLurq6sry8vLy8vLy8vLy8vLy8vLy8BKK6uro5Wby8
        vLy8vLy8vLy8vLy8vLwEcbq6um+GvLy8vLy8vLy8vLy8vLy8vLxhoZWgmry8vLy8vLy8vLy8vLy8vP//
        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
        /wD4D/8A4B//AOA//wA=
</value>
  </data>
</root>